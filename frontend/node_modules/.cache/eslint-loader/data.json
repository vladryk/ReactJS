{"src/index.js":{"hash":"8b68b7717b803228c6489a5f40b43b58","res":{"results":[{"filePath":"/home/vokhrimenko/dev/react/my-app/src/index.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/App.js":{"hash":"a8f8419e1607fbfe2095a8a4ddb8081d","res":{"results":[{"filePath":"/home/vokhrimenko/dev/react/my-app/frontend/src/App.js","messages":[{"ruleId":"no-redeclare","severity":1,"message":"'expires' is already defined.","line":16,"column":11,"nodeType":"Identifier","source":"\telse var expires = \"\";"},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":25,"column":21,"nodeType":"BinaryExpression","source":"\t\twhile (c.charAt(0)==' ') c = c.substring(1,c.length);"},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":26,"column":25,"nodeType":"BinaryExpression","source":"\t\tif (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);"}],"errorCount":0,"warningCount":3,"source":"import React, { Component } from 'react';\n// import ReactDOM from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport $ from 'jquery';\n\n\n// functions bellow come from http://www.quirksmode.org/js/cookies.html\n\nfunction createCookie(name,value,days) {\n\tif (days) {\n\t\tvar date = new Date();\n\t\tdate.setTime(date.getTime()+(days*24*60*60*1000));\n\t\tvar expires = \"; expires=\"+date.toGMTString();\n\t}\n\telse var expires = \"\";\n\tdocument.cookie = name+\"=\"+value+expires+\"; path=/\";\n}\n\nfunction readCookie(name) {\n\tvar nameEQ = name + \"=\";\n\tvar ca = document.cookie.split(';');\n\tfor(var i=0;i < ca.length;i++) {\n\t\tvar c = ca[i];\n\t\twhile (c.charAt(0)==' ') c = c.substring(1,c.length);\n\t\tif (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n\t}\n\treturn null;\n}\n\n\nvar App = React.createClass({\n    getInitialState: function() {\n        return {\n            authorized: false,\n            data: [],\n        };\n    },\n\n    login: function() {\n        this.setState({authorized: true,});\n    },\n\n\n    ExpensesFromServer: function () {\n        $.ajax({\n            url: this.props.url + 'api/expenses/',\n            dataType: 'json',\n            cache: false,\n            type: 'GET',\n            beforeSend: function (xhr) {\n                var token = readCookie('csrftoken');\n                if (token == null) {\n                    token = ''\n                }\n                xhr.setRequestHeader (\"Authorization\", \"Token \" + token);\n            },\n            success: function (data) {\n                this.setState({data: data});\n            }.bind(this),\n            error: function (xhr, status, err) {\n                console.log(xhr);\n            }\n        });\n    },\n    handleLimit: function (limit) {\n        var date = new Date(Date.now());\n        var sum = 0;\n        var elength = this.state.data.length;\n        for (var i = 0; i < elength; i++) {\n            var old_date = new Date(this.state.data[i].date);\n            if (old_date.toLocaleDateString() === date.toLocaleDateString()) {\n                sum += this.state.data[i].cost;\n            }\n        }\n        var day_limit = limit.limit;\n        if (!day_limit) {\n            return 'empty';\n        }\n        else if (sum <= day_limit) {\n            return 'isLess';\n        }\n        return 'isGreater';\n    },\n    handleExpensesFilter: function (filter) {\n        var new_data = this.state.data;\n        var data = [];\n        var elength = this.state.data.length;\n        for (var i = 0; i < elength; i++) {\n            if (new_data[i].date >= filter.datefrom && new_data[i].date <= filter.dateto &&\n                new_data[i].time >= filter.timefrom && new_data[i].time <= filter.timeto &&\n                new_data[i].text.search(filter.text) !== -1) {\n                data.push(new_data[i]);\n            }\n        }\n        this.setState({data: data});\n    },\n    handleExpenseEdit: function (expense) {\n        var that = this;\n        $.ajax({\n            url: this.props.url + 'api/expenses/' + expense.id + '/',\n            dataType: 'json',\n            type: 'PATCH',\n            beforeSend: function (xhr) {\n                var token = readCookie('csrftoken');\n                if (token == null) {\n                    token = ''\n                }\n                xhr.setRequestHeader (\"Authorization\", \"Token \" + token);\n            },\n            data: expense,\n            success: function (data) {\n                var new_data = that.state.data;\n                var elength = that.state.data.length;\n                for (var i = 0; i < elength; i++) {\n                    if (that.state.data[i].id === data.id) {\n                        new_data[i].text = data.text;\n                        new_data[i].time = data.time;\n                        new_data[i].date = data.date;\n                        new_data[i].cost = data.cost;\n                        break;\n                    }\n                }\n                that.setState({data: new_data});\n            },\n            error: function (xhr, status, err) {\n                console.log(xhr);\n            }\n        });\n    },\n    handleExpenseSubmit: function (expense) {\n        var expenses = this.state.data;\n        var that = this;\n        $.ajax({\n            url: this.props.url + 'api/expenses/',\n            dataType: 'json',\n            type: 'POST',\n            beforeSend: function (xhr) {\n                var token = readCookie('csrftoken');\n                if (token == null) {\n                    token = ''\n                }\n                xhr.setRequestHeader (\"Authorization\", \"Token \" + token);\n            },\n            data: expense,\n            success: function (data) {\n                that.setState({data: expenses.concat(data)});\n            },\n            error: function (xhr, status, err) {\n                console.log(xhr);\n            }\n        });\n    },\n    handleExpenseRemove: function (expense) {\n        var index = -1;\n        var elength = this.state.data.length;\n        for (var i = 0; i < elength; i++) {\n            if (this.state.data[i].id === expense.id) {\n                index = i;\n                break;\n            }\n        }\n        var data = this.state.data[index];\n        var that = this;\n\n        $.ajax({\n            url: this.props.url + 'api/expenses/' + expense.id + '/',\n            dataType: 'json',\n            beforeSend: function (xhr) {\n                var token = readCookie('csrftoken');\n                if (token == null) {\n                    token = ''\n                }\n                xhr.setRequestHeader (\"Authorization\", \"Token \" + token);\n            },\n            type: 'DELETE',\n            data: data,\n            success: function (data) {\n                that.state.data.splice(index, 1);\n                that.setState({data: that.state.data});\n            },\n            error: function (xhr, status, err) {\n                console.log(xhr);\n            }\n        });\n    },\n    // handleLogin: function (is_authorized) {\n    //     console.log(is_authorized);\n    //     this.setState({authorized: is_authorized});\n    // },\n    // getInitialState: function () {\n    //     return {data: [], authorized: false};\n    // },\n    componentDidMount: function () {\n        if (this.state.authorized) {\n            this.ExpensesFromServer();\n        }\n    },\n\n    render: function() {\n      return (\n         <div className=\"container\">\n            <LoginForm isAuthorized={this.state.authorized} loginFunc={this.login} />\n            {/*<ExpensesList isAuthorized={this.state.authorized} />*/}\n             <div className={this.state.authorized?\"\":\"hidden\"}>\n                    <ExpensesList data={this.state.data} onExpenseDelete={this.handleExpenseRemove}\n                                  onExpenseEdit={this.handleExpenseEdit} />\n                    <div className=\"row\">\n                        <div className=\"col-sm-4\">\n                            <ExpensesForm onExpenseSubmit={this.handleExpenseSubmit}/>\n                        </div>\n                        <div className=\"col-sm-4\">\n                            <ExpensesFilterForm onExpensesFilter={this.handleExpensesFilter}/>\n                        </div>\n                        <div className=\"col-sm-4\">\n                            <ExpensesLimit onLimit={ this.handleLimit }/>\n                        </div>\n                    </div>\n             </div>\n         </div>\n      );\n   },\n});\n\n\nvar ExpensesList = React.createClass({\n    handleExpenseRemove: function (e) {\n        this.props.onExpenseDelete(e);\n    },\n    handleExpenseEdit: function (e) {\n        this.props.onExpenseEdit(e);\n    },\n\n    render: function () {\n        var that = this;\n        var expenseNodes = this.props.data.map(function (expense) {\n            return (\n                <Expense date={expense.date} time={expense.time} cost={expense.cost} id={expense.id} key={expense.id}\n                         onDelete={that.handleExpenseRemove} onEdit={that.handleExpenseEdit}>\n                    {expense.text}\n                </Expense>\n            )\n        });\n\n        return (\n            <div className={this.props.isAuthorized? '' : 'hidden'}>\n                <div className=\"expensesList\">\n                    <br/>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>Date</th>\n                            <th>Time</th>\n                            <th>Text</th>\n                            <th>Cost</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                            {expenseNodes}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n});\n\n\nvar ExpensesFilterForm = React.createClass({\n    getInitialState: function () {\n        return {datefrom: '', dateto: '', timefrom: '', timeto: '', text: ''};\n    },\n    handleDateFromChange: function (e) {\n        this.setState({datefrom: e.target.value});\n    },\n    handleDateToChange: function (e) {\n        this.setState({dateto: e.target.value});\n    },\n    handleTimeFromChange: function (e) {\n        this.setState({timefrom: e.target.value});\n    },\n    handleTimeToChange: function (e) {\n        this.setState({timeto: e.target.value});\n    },\n    handleTextChange: function (e) {\n        this.setState({text: e.target.value});\n    },\n    handleFilter: function (e) {\n        var text = this.state.text;\n        var datefrom = this.state.datefrom;\n        var dateto = this.state.dateto;\n        var timefrom = this.state.timefrom;\n        var timeto = this.state.timeto;\n        if (!text || !datefrom || !dateto || !timefrom || !timeto) {\n            return;\n        }\n        this.props.onExpensesFilter({\n            datefrom: datefrom,\n            dateto: dateto,\n            timefrom: timefrom,\n            timeto: timeto,\n            text: text\n        });\n        this.setState({datefrom: '', dateto: '', timefrom: '', timeto: '', text: ''});\n    },\n    render: function () {\n        return (\n            <form className=\"form-inline\">\n                <br/>\n                <input type=\"date\"\n                       className=\"form-control\"\n                       placeholder=\"DateFrom\"\n                       value={this.state.datefrom}\n                       onChange={this.handleDateFromChange}/>\n                <br/>\n                <input type=\"date\"\n                       className=\"form-control\"\n                       placeholder=\"DateTo\"\n                       value={this.state.dateto}\n                       onChange={this.handleDateToChange}/>\n                <br/>\n                <input type=\"time\"\n                       className=\"form-control\"\n                       placeholder=\"TimeFrom\"\n                       value={this.state.timefrom}\n                       onChange={this.handleTimeFromChange}/>\n                <br/>\n                <input type=\"time\"\n                       className=\"form-control\"\n                       placeholder=\"TimeTo\"\n                       value={this.state.timeto}\n                       onChange={this.handleTimeToChange}/>\n                <br/>\n                <input type=\"text\"\n                       className=\"form-control\"\n                       placeholder=\"Your text\"\n                       value={this.state.text}\n                       onChange={this.handleTextChange}/>\n                <br/>\n                <input type=\"button\" value=\"Filter\" onClick={this.handleFilter}/>\n            </form>\n        );\n    }\n});\n\nvar ExpensesForm = React.createClass({\n    getInitialState: function () {\n        return {date: '', time: '', text: '', cost: ''};\n    },\n    handleDateChange: function (e) {\n        this.setState({date: e.target.value});\n    },\n    handleTimeChange: function (e) {\n        this.setState({time: e.target.value});\n    },\n    handleTextChange: function (e) {\n        this.setState({text: e.target.value});\n    },\n    handleCostChange: function (e) {\n        this.setState({cost: e.target.value});\n    },\n    handleSubmit: function (e) {\n        e.preventDefault();\n        var text = this.state.text.trim();\n        var date = this.state.date;\n        var time = this.state.time;\n        var cost = this.state.cost;\n        if (!text || !date || !time || !cost) {\n            return;\n        }\n        this.props.onExpenseSubmit({date: date, time: time, text: text, cost: cost});\n        this.setState({date: '', time: '', text: '', cost: ''});\n    },\n    render: function () {\n        return (\n            <form className=\"form-inline\" onSubmit={this.handleSubmit}>\n                <br/>\n                <input type=\"date\"\n                       className=\"form-control\"\n                       placeholder=\"Date\"\n                       value={this.state.date}\n                       onChange={this.handleDateChange}/>\n                <br/>\n                <input type=\"time\"\n                       className=\"form-control\"\n                       placeholder=\"Time\"\n                       value={this.state.time}\n                       onChange={this.handleTimeChange}/>\n                <br/>\n                <input type=\"text\"\n                       className=\"form-control\"\n                       placeholder=\"Say something...\"\n                       value={this.state.text}\n                       onChange={this.handleTextChange}/>\n                <br/>\n                <input type=\"number\"\n                       className=\"form-control\"\n                       placeholder=\"Cost\"\n                       value={this.state.cost}\n                       onChange={this.handleCostChange}/>\n                <br/>\n                <input type=\"submit\" value=\"Save\"/>\n            </form>\n        );\n    }\n});\n\nvar ExpensesLimit = React.createClass({\n    getInitialState: function () {\n        return {limit: ''};\n    },\n    handleLimitChange: function (e) {\n        this.setState({limit: e.target.value});\n    },\n    render: function () {\n        return (\n            <div className={this.props.onLimit({limit: this.state.limit})}>\n                Limit\n                <br/>\n                <input type=\"number\" className=\"form-control\" value={ this.state.limit }\n                       onChange={this.handleLimitChange}/>\n            </div>\n        );\n    }\n});\n\n\nvar Expense = React.createClass({\n    handleDateChange: function (e) {\n        this.handleExpenseEdit({\n            text: this.props.text,\n            date: e.target.value,\n            time: this.props.time,\n            cost: this.props.cost,\n            id: this.props.id\n        });\n    },\n    handleTimeChange: function (e) {\n        this.handleExpenseEdit({\n            text: this.props.text,\n            date: this.props.date,\n            time: e.target.value,\n            cost: this.props.cost,\n            id: this.props.id\n        });\n    },\n    handleTextChange: function (e) {\n        this.handleExpenseEdit({\n            text: e.target.value,\n            date: this.props.date,\n            time: this.props.time,\n            cost: this.props.cost,\n            id: this.props.id\n        });\n    },\n    handleCostChange: function (e) {\n        this.handleExpenseEdit({\n            text: this.props.text,\n            date: this.props.date,\n            time: this.props.time,\n            cost: e.target.value,\n            id: this.props.id\n        });\n    },\n    handleExpenseEdit: function (expense) {\n        this.props.onEdit(expense);\n        return false;\n    },\n    handleExpenseRemove: function () {\n        this.props.onDelete({\n            id: this.props.id,\n            date: this.props.date,\n            time: this.props.time,\n            text: this.props.children,\n            cost: this.props.cost\n        });\n        return false;\n    },\n    render: function () {\n        return (\n            <tr>\n                <td><input type=\"date\" value={this.props.date} onChange={this.handleDateChange}/></td>\n                <td><input type=\"time\" value={this.props.time} onChange={this.handleTimeChange}/></td>\n                <td><input type=\"text\" value={this.props.children} onChange={this.handleTextChange}/></td>\n                <td><input type=\"number\" value={this.props.cost} onChange={this.handleCostChange}/></td>\n                <td><input type=\"button\" value=\"Remove\" onClick={this.handleExpenseRemove}/></td>\n\n            </tr>\n        );\n    }\n});\n\nclass LoginForm extends Component {\n\n    componentDidMount() {\n        this.checkAuthorize();\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {username: '',\n                      password: '',\n                      authorized: false,\n                      };\n        this.handleUsername = this.handleUsername.bind(this);\n        this.handlePassword = this.handlePassword.bind(this);\n        // this.onClick = this.onClick.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.checkAuthorize = this.checkAuthorize.bind(this);\n    };\n\n    handleUsername(e) {\n        this.setState({username: e.target.value});\n    }\n\n    handlePassword(e) {\n        this.setState({password: e.target.value});\n    }\n\n    checkAuthorize() {\n        $.ajax({\n            url: '/api/expenses/',\n            type: 'GET',\n            beforeSend: function (xhr) {\n                var token = readCookie('csrftoken');\n                if (token == null) {\n                    token = ''\n                }\n                xhr.setRequestHeader (\"Authorization\", \"Token \" + token);\n            },\n            statusCode: {\n              401: function (response) {\n                 // alert('1');\n                 this.setState({authorized: false});\n                 createCookie('csrftoken', '', 1);\n              }.bind(this)\n            },\n            success: function(resp) {\n                // alert('2');\n                this.setState({authorized: true});\n                this.props.loginFunc();\n            }.bind(this)\n        });\n    }\n\n    handleLogin () {\n        var data = {username: this.state.username, password: this.state.password};\n        $.ajax({\n            xhrFields: {\n                withCredentials: true\n            },\n            crossDomain: true,\n            // beforeSend: function (xhr) {\n            //     xhr.setRequestHeader('X-CSRFToken', readCookie('csrftoken'));\n            // },\n            url: 'api-token-auth/',\n            type: 'POST',\n            data: data,\n            success: function (data) {\n                this.setState({username: '', password: '', authorized: true});\n                this.setState({authorized: true});\n                createCookie('csrftoken', data.token, 1);\n                this.props.loginFunc();\n            }.bind(this),\n            error: function (xhr, status, err) {\n                console.log(xhr);\n            },\n        });\n    }\n\n  render() {\n\n    return (\n        <div className={this.state.authorized? 'hidden' : ''}>\n        <div className=\"container\">\n            <label><b>Username\n            <input type=\"text\" placeholder=\"Enter Username\" name=\"uname\" value={this.state.username} onChange={this.handleUsername} required />\n        </b></label>\n\n        <label><b>Password\n        <input type=\"password\" placeholder=\"Enter Password\" name=\"psw\" value={this.state.password} onChange={this.handlePassword} required />\n        </b></label>\n\n        <button type=\"submit\" onClick={this.handleLogin}>Login</button>\n\n        </div>\n            <span className=\"psw\"><a href=\"#\">Create account</a></span>\n        </div>\n\n    );\n  }\n}\n\n\nexport default App;\n\n\n"}],"errorCount":0,"warningCount":3}}}